"""
This module defines per-column dtype conversions and columns that should use
dictionary compression.
"""

from numpy import dtype

"""
dict like: {column_name: (downcast_dtype, original_dtype)}.
The conversion script also checks if the cast creates "too much" error and
doesn't use the downcast column if so.
"""
CASTCOLS = {'ggoid_0': (dtype('uint32'), dtype('int32')),
 'ggoid_1': (dtype('uint32'), dtype('int32')),
 'vsn': (dtype('uint8'), dtype('int32')),
 'tilenum': (dtype('uint16'), dtype('int32')),
 'type': (dtype('uint8'), dtype('int32')),
 'ow': (dtype('uint8'), dtype('int32')),
 'prod': (dtype('uint8'), dtype('int32')),
 'img': (dtype('uint8'), dtype('int32')),
 'try': (dtype('uint8'), dtype('int32')),
 'band': (dtype('uint8'), dtype('int32')),
 'id': (dtype('uint16'), dtype('int32')),
 'subvisit': (dtype('uint8'), dtype('int16')),
 'leg': (dtype('uint8'), dtype('int16')),
 'primary': (dtype('uint8'), dtype('int32')),
 'nuv_det_x': (dtype('int16'), dtype('float32')),
 'nuv_det_y': (dtype('int16'), dtype('float32')),
 'fuv_det_x': (dtype('int16'), dtype('float32')),
 'fuv_det_y': (dtype('int16'), dtype('float32')),
 'chkobj_type': (dtype('uint8'), dtype('int32')),
 'chkobj_id': (dtype('int16'), dtype('int32')),
 'misc_flags': (dtype('int16'), dtype('int32')),
 'nuv_nc_r1': (dtype('uint8'), dtype('int16')),
 'nuv_nc_r2': (dtype('uint8'), dtype('int16')),
 'nuv_nc_r3': (dtype('uint8'), dtype('int16')),
 'fuv_nc_r1': (dtype('uint8'), dtype('int16')),
 'fuv_nc_r2': (dtype('uint8'), dtype('int16')),
 'fuv_nc_r3': (dtype('uint8'), dtype('int16')),
 'nuv_scq_mdn': (dtype('int16'), dtype('float32')),
 'nuv_scq_p05': (dtype('int16'), dtype('float32')),
 'nuv_scq_p95': (dtype('int16'), dtype('float32')),
 'fuv_scq_mdn': (dtype('int16'), dtype('float32')),
 'fuv_scq_p05': (dtype('int16'), dtype('float32')),
 'fuv_scq_p95': (dtype('int16'), dtype('float32')),
 'nuv_maskpix': (dtype('int16'), dtype('int32')),
 'fuv_maskpix': (dtype('int16'), dtype('int32')),
 'nuv_artifact': (dtype('uint16'), dtype('int32')),
 'fuv_artifact': (dtype('int16'), dtype('int32')),
 'nuv_scx': (dtype('int16'), dtype('float32')),
 'nuv_scy': (dtype('int16'), dtype('float32')),
 'fuv_scx': (dtype('int16'), dtype('float32')),
 'fuv_scy': (dtype('int16'), dtype('float32')),
 'nuv_Q': (dtype('int16'), dtype('float32')),
 'fuv_Q': (dtype('int16'), dtype('float32')),
 'nuv_ambg': (dtype('int8'), dtype('int32')),
 'fuv_ambg': (dtype('int8'), dtype('int32')),
 'nuv_nc': (dtype('int16'), dtype('int32')),
 'fuv_nc': (dtype('int16'), dtype('int32')),
 'nuv_cid1': (dtype('int16'), dtype('int32')),
 'fuv_cid1': (dtype('int16'), dtype('int32')),
 'nuv_cid2': (dtype('int16'), dtype('int32')),
 'fuv_cid2': (dtype('int16'), dtype('int32')),
 'fuv_cid3': (dtype('int16'), dtype('int32')),
 'NUV_NUMBER': (dtype('uint16'), dtype('int32')),
 'NUV_THRESHOLD': (dtype('int8'), dtype('float32')),
 'NUV_ISOAREA_IMAGE': (dtype('int16'), dtype('float32')),
 'NUV_ISOAREAF_IMAGE': (dtype('int16'), dtype('float32')),
 'NUV_XMIN_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_YMIN_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_XMAX_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_YMAX_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_XPEAK_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_YPEAK_IMAGE': (dtype('int16'), dtype('int32')),
 'NUV_ERRX2_IMAGE': (dtype('float32'), dtype('float64')),
 'NUV_ERRY2_IMAGE': (dtype('float32'), dtype('float64')),
 'NUV_ERRX2_WORLD': (dtype('float32'), dtype('float64')),
 'NUV_ERRY2_WORLD': (dtype('float32'), dtype('float64')),
 'NUV_FLAGS': (dtype('uint8'), dtype('int16')),
 'FUV_NUMBER': (dtype('uint16'), dtype('int32')),
 'FUV_THRESHOLD': (dtype('int8'), dtype('float32')),
 'FUV_ISOAREA_IMAGE': (dtype('int32'), dtype('float32')),
 'FUV_ISOAREAF_IMAGE': (dtype('int32'), dtype('float32')),
 'FUV_XMIN_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_YMIN_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_XMAX_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_YMAX_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_XPEAK_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_YPEAK_IMAGE': (dtype('int16'), dtype('int32')),
 'FUV_ERRX2_IMAGE': (dtype('float32'), dtype('float64')),
 'FUV_ERRY2_IMAGE': (dtype('float32'), dtype('float64')),
 'FUV_ERRX2_WORLD': (dtype('float32'), dtype('float64')),
 'FUV_ERRY2_WORLD': (dtype('float32'), dtype('float64')),
 'FUV_FLAGS': (dtype('uint8'), dtype('int16'))}

"""Columns for which dictionary compression appears to be efficient on average."""
DICTCOLS = (
    'ggoid_0', 'vsn', 'tilenum', 'type', 'ow', 'prod', 'img', 'try', 'band', 'subvisit', 'leg',
    'E_bv', 'primary', 'nuv_det_x', 'nuv_det_y', 'fuv_det_x', 'fuv_det_y', 'chkobj_type', 'chkobj_id',
    'chkobj_r', 'chkobj_pa', 'misc_flags', 'fuv_ncat_flags', 'nuv_nc_r1', 'nuv_nc_r2', 'nuv_nc_r3', 'fuv_nc_r1',
    'fuv_nc_r2', 'fuv_nc_r3', 'nuv_nf_r1', 'fuv_nf_r1', 'fuv_nf_r2', 'nuv_skybg', 'fuv_skybg',
    'nuv_weight', 'nuv_thres', 'nuv_scq_mdn', 'nuv_scq_p05', 'nuv_scq_p95', 'fuv_scq_mdn', 'fuv_scq_p05',
    'fuv_scq_p95', 'nuv_maskpix', 'fuv_maskpix', 'nuv_artifact', 'fuv_artifact', 'nuv_scx', 'nuv_scy', 'fuv_scx',
    'fuv_scy', 'nuv_Q', 'fuv_Q', 'nuv_ambg', 'fuv_ambg', 'nuv_nc', 'fuv_nc', 'nuv_cid1', 'nuv_cid2', 'fuv_cid2',
    'nuv_cid3', 'fuv_cid3', 'NUV_THRESHOLD', 'NUV_MU_THRESHOLD', 'NUV_ISOAREA_IMAGE', 'NUV_ISOAREA_WORLD',
    'NUV_ISOAREAF_IMAGE', 'NUV_ISOAREAF_WORLD', 'NUV_XMIN_IMAGE', 'NUV_YMIN_IMAGE', 'NUV_XMAX_IMAGE', 'NUV_YMAX_IMAGE',
    'NUV_XPEAK_IMAGE', 'NUV_YPEAK_IMAGE', 'NUV_FLAGS', 'FUV_NUMBER', 'FUV_THRESHOLD', 'FUV_MU_THRESHOLD', 'FUV_ISOAREA_IMAGE',
    'FUV_ISOAREA_WORLD', 'FUV_ISOAREAF_IMAGE', 'FUV_ISOAREAF_WORLD', 'FUV_XMIN_IMAGE', 'FUV_YMIN_IMAGE', 'FUV_XMAX_IMAGE',
    'FUV_YMAX_IMAGE', 'FUV_XPEAK_IMAGE', 'FUV_YPEAK_IMAGE', 'FUV_FLAGS'
)